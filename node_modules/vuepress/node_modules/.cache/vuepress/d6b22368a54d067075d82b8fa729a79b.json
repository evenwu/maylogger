{"remainingRequest":"/Users/even.wu/Github/tetris/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/even.wu/Github/tetris/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/even.wu/Github/tetris/docs/README.md?vue&type=style&index=0&module=true&lang=css&","dependencies":[{"path":"/Users/even.wu/Github/tetris/docs/README.md","mtime":1554713852744},{"path":"/Users/even.wu/Github/tetris/node_modules/css-loader/index.js","mtime":1554471623245},{"path":"/Users/even.wu/Github/tetris/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/even.wu/Github/tetris/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/Users/even.wu/Github/tetris/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/even.wu/Github/tetris/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/even.wu/Github/tetris/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.example {\n  color: #41b883;\n}\n",{"version":3,"sources":["README.md"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AACA;AACA","file":"README.md","sourceRoot":"docs","sourcesContent":["<template>\n<div class=\"content\"><h1 id=\"在-markdown-中-使用-vue\"><a class=\"header-anchor\" href=\"#在-markdown-中-使用-vue\" aria-hidden=\"true\">#</a> 在 Markdown 中 使用 Vue</h1>\n<h2 id=\"使用组件\"><a class=\"header-anchor\" href=\"#使用组件\" aria-hidden=\"true\">#</a> 使用组件</h2>\n<p>所有在 <code>.vuepress/components</code> 中找到的 <code>*.vue</code> 文件将会自动地被注册为全局的异步组件，如：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>.\n└─ .vuepress\n   └─ components\n      ├─ demo-1.vue\n      ├─ OtherComponent.vue\n      └─ Foo\n         └─ Bar.vue\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>你可以直接使用这些组件在任意的 Markdown 文件中（组件名是通过文件名取到的）：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>demo-1</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OtherComponent</span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Foo-Bar</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><demo-1></demo-1>\n<OtherComponent/>\n<Foo-Bar/>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">重要！</p>\n<p>请确保一个自定义组件的名字包含连接符或者是 PascalCase，否则，它将会被视为一个内联元素，并被包裹在一个 <code>&lt;p&gt;</code> 标签中，这将会导致 HTML 渲染紊乱，因为 HTML 标准规定， <code>&lt;p&gt;</code> 标签中不允许放置任何块级元素。</p>\n</div>\n<h3 id=\"在标题中使用组件\"><a class=\"header-anchor\" href=\"#在标题中使用组件\" aria-hidden=\"true\">#</a> 在标题中使用组件</h3>\n<p>你可以在标题中使用 Vue 组件，但是请留意以下两种方式的不同：</p>\n<table>\n<thead>\n<tr>\n<th>Markdown</th>\n<th>输出的 HTML</th>\n<th>解析后的标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre v-pre><code> # text &lt;Tag/&gt; </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;Tag/&gt;&lt;/h1&gt;</code></td>\n<td><code>text</code></td>\n</tr>\n<tr>\n<td><pre v-pre><code> # text `&lt;Tag/&gt;` </code></pre></td>\n<td><code>&lt;h1&gt;text &lt;code&gt;&amp;lt;Tag/&amp;gt;&lt;/code&gt;&lt;/h1&gt;</code></td>\n<td><code>text &lt;Tag/&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p>被 <code>&lt;code&gt;</code> 包装的 HTML 将按原样显示，只有未被包装的 HTML 才会被 Vue 解析。</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>输出的 HTML 由 <a href=\"https://github.com/markdown-it/markdown-it\" target=\"_blank\" rel=\"noopener noreferrer\">markdown-it<OutboundLink/></a> 完成。而解析后的标题由 VuePress 完成，用于<router-link to=\"./../default-theme-config/#侧边栏\">侧边栏</router-link>以及文档的标题。</p>\n</div>\n<h2 id=\"使用预处理器\"><a class=\"header-anchor\" href=\"#使用预处理器\" aria-hidden=\"true\">#</a> 使用预处理器</h2>\n<p>VuePress 对以下预处理器已经内置相关的 webpack 配置：<code>sass</code>、<code>scss</code>、<code>less</code>、<code>stylus</code> 和 <code>pug</code>。要使用它们你只需要在项目中安装对应的依赖即可。例如，要使用 <code>sass</code>，需要安装：</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>yarn add -D sass-loader node-sass\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>然后你就可以在 Markdown 或是组件中使用如下代码：</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sass<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n  .title\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>要在组件中使用 <code>&lt;template lang=&quot;pug&quot;&gt;</code>，则需要安装 <code>pug</code> 和 <code>pug-plain-loader</code>:</p>\n<!--beforebegin--><div class=\"language-bash extra-class\"><!--afterbegin--><pre v-pre class=\"language-bash\"><code>yarn add -D pug pug-plain-loader\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">TIP</p>\n<p>需要指出的是，如果你是一个 <code>stylus</code> 用户，你并不需要在你的项目中安装 <code>stylus</code> 和 <code>stylus-loader</code>，因为 VuePress 已经内置了它们。</p>\n<p>对于那些没有内置的预处理器，除了安装对应的依赖，你还需要 <router-link to=\"./../config/#configurewebpack\">拓展内部的 Webpack 配置</router-link>。</p>\n</div>\n<h2 id=\"脚本和样式提升\"><a class=\"header-anchor\" href=\"#脚本和样式提升\" aria-hidden=\"true\">#</a> 脚本和样式提升</h2>\n<p>有时，你可以只想在当前页面应用一些 JavaScript 或者 CSS，在这种情况下，你可以直接在 Markdown 文件中使用原生的 <code>&lt;script&gt;</code> 或者 <code>&lt;style&gt;</code> 标签，它们将会从编译后的 HTML 文件中提取出来，并作为生成的 Vue 单文件组件的 <code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 标签。</p>\n<p class=\"demo\" :class=\"$style.example\"></p>\n<h2 id=\"内置的组件\"><a class=\"header-anchor\" href=\"#内置的组件\" aria-hidden=\"true\">#</a> 内置的组件</h2>\n<h3 id=\"outboundlink\"><a class=\"header-anchor\" href=\"#outboundlink\" aria-hidden=\"true\">#</a> OutboundLink <Badge text=\"stable\"/></h3>\n<p>(<OutboundLink/>) 用来表明当前是一个外部链接。在 VuePress 中这个组件会紧跟在每一个外部链接后面。</p>\n<h3 id=\"clientonly\"><a class=\"header-anchor\" href=\"#clientonly\" aria-hidden=\"true\">#</a> ClientOnly <Badge text=\"stable\"/></h3>\n<p>参考 <a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84-api-%E8%AE%BF%E9%97%AE%E9%99%90%E5%88%B6\">浏览器的 API 访问限制</a>。</p>\n<h3 id=\"content\"><a class=\"header-anchor\" href=\"#content\" aria-hidden=\"true\">#</a> Content <Badge text=\"beta\" type=\"warn\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>custom</code> - boolean</li>\n</ul>\n</li>\n<li>\n<p><strong>用法</strong>：</p>\n</li>\n</ul>\n<p>当前的 <code>.md</code> 文件渲染的内容，当你在使用 <router-link to=\"./../default-theme-config/#特定页面的自定义布局\">自定义布局</router-link> 时，它将非常有用。</p>\n<!--beforebegin--><div class=\"language-vue extra-class\"><!--afterbegin--><pre v-pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>参考:</strong></p>\n<ul>\n<li><router-link to=\"./custom-themes.html#获取渲染内容\">自定义主题 &gt; 获取渲染内容</router-link></li>\n</ul>\n<h3 id=\"badge\"><a class=\"header-anchor\" href=\"#badge\" aria-hidden=\"true\">#</a> Badge <Badge text=\"beta\" type=\"warn\"/> <Badge text=\"0.10.1+\"/></h3>\n<ul>\n<li>\n<p><strong>Props</strong>:</p>\n<ul>\n<li><code>text</code> - string</li>\n<li><code>type</code> - string, 可选值： <code>&quot;tip&quot;|&quot;warn&quot;|&quot;error&quot;</code>，默认值是： <code>&quot;tip&quot;</code></li>\n<li><code>vertical</code> - string, 可选值： <code>&quot;top&quot;|&quot;middle&quot;</code>，默认值是： <code>&quot;top&quot;</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n</li>\n</ul>\n<p>你可以在标题中，使用这个组件来为某些 API 添加一些状态：</p>\n<!--beforebegin--><div class=\"language-md extra-class\"><!--afterbegin--><pre v-pre class=\"language-md\"><code><span class=\"token title important\"><span class=\"token punctuation\">###</span> Badge &lt;Badge text=\"beta\" type=\"warn\"/> &lt;Badge text=\"0.10.1+\"/></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><strong>参考:</strong></p>\n<ul>\n<li><a href=\"#%E5%9C%A8%E6%A0%87%E9%A2%98%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6\">在标题中使用组件</a></li>\n</ul>\n</div>\n</template>\n<style module>\n.example {\n  color: #41b883;\n}\n</style>\n\n<script>\nexport default {\n  mounted () {\n    document.querySelector(`.${this.$style.example}`)\n      .textContent = '这个块是被内联的脚本渲染的，样式也采用了内联样式。'\n  }\n}\n</script>\n"]}]}